/*!
@~chinese
@file include/global/dconfig.h

@class Dtk::Core::DConfigBackend dconfig.h
@brief 配置后端的抽象接口。
@details 所有DConfig使用的配置后端都继承此类,用户可以继承此类实现自己的配置后端。
@sa FileBackend
@sa DBusBackend
@sa QSettingBackend

@fn Dtk::Core::DConfigBackend::~DConfigBackend()
@brief DConfigBackend析构函数
@sa FileBackend::~FileBackend()
@sa DBusBackend::~DBusBackend()
@sa QSettingBackend::~QSettingBackend()

@fn bool Dtk::Core::DConfigBackend::isValid() const = 0
@brief 判断此后端是否可用
@sa DConfig::isValid()
@sa FileBackend::isValid()
@sa DBusBackend::isValid()
@sa QSettingBackend::isValid()

@fn bool Dtk::Core::DConfigBackend::load(const QString &) = 0
@brief 初始化后端
@details appId 管理的配置信息key值,默认为应用程序名称。
@sa FileBackend::load()
@sa DBusBackend::load()
@sa QSettingBackend::load()

@fn QStringList Dtk::Core::DConfigBackend::keyList() = 0
@brief 获得所有可用的配置项名称
@sa DConfig::keyList()
@sa FileBackend::keyList()
@sa DBusBackend::keyList()
@sa QSettingBackend::keyList()

@fn QVariant Dtk::Core::DConfigBackend::value(const QString &key, const QVariant &fallback = QVariant()) const = 0
@brief 根据配置项名称获得对应值
@param[in] key 配置项名称
@param[in] fallback 没有获取到配置项值后提供的默认值
@sa DConfig::value()
@sa FileBackend::value()
@sa DBusBackend::value()
@sa QSettingBackend::value()

@fn void Dtk::Core::DConfigBackend::setValue(const QString &key, const QVariant &value) = 0
@brief 根据配置项名称设置其值
@param[in] key 配置项名称
@param[in] value 需要更新的值
@sa DConfig::setValue()
@sa FileBackend::setValue()
@sa DBusBackend::setValue()
@sa QSettingBackend::setValue()

@fn void Dtk::Core::DConfigBackend::reset(const QString &key)
@brief 设置其配置项对应的默认值,此值为经过override机制覆盖后的值,不一定为此配置文件中meta中定义的值。
@param[in] key 配置项名称
@sa DConfig::reset()
@sa FileBackend::reset()
@sa DBusBackend::reset()
@sa QSettingBackend::reset()

@fn QString Dtk::Core::DConfigBackend::name() const = 0
@brief 后端配置的唯一标识
@sa FileBackend::name()
@sa DBusBackend::name()
@sa QSettingBackend::name()

@class Dtk::Core::QSettingBackend dconfig.h
@brief QSetting后端,继承自DConfigBackend抽象接口,并实现了虚函数。
@sa DConfigBackend

@fn QSettingBackend Dtk::Core::QSettingBackend::QSettingBackend(DConfigPrivate* o)
@brief QSettingBackend构造函数

@class Dtk::Core::DConfigPrivate dconfig.h
@brief DConfig的私有实现

@fn DConfigPrivate Dtk::Core::DConfigPrivate::DConfigPrivate()
@brief DConfigPrivate构造函数

@fn bool Dtk::Core::DConfigPrivate::invalid()
@brief 判断此后端是否可用

@fn DConfigBackend* Dtk::Core::DConfigPrivate::getOrCreateBackend()
@brief 创建一个配置后端
@details 默认使用的配置后端会优先根据环境变量来选择配置中心的D-Bus接口还是文件配置后端接口。若没有配置此环境变量,则根据是否有配置中心提供D-Bus服务来选择配置中心服务还是文件配置后端接口。

@fn DConfigBackend* Dtk::Core::DConfigPrivate::createBackendByEnv()
@brief 创建一个配置后端
@details 尝试根据环境变量来选择配置中心的D-Bus接口还是文件配置后端接口。

@var QString Dtk::Core::DConfigPrivate::appId
@brief 配置文件所属的应用Id,为空时默认为本应用Id。

@var QString Dtk::Core::DConfigPrivate::name
@brief 配置文件名

@var QString Dtk::Core::DConfigPrivate::subpath
@brief 配置文件对应的子目录

@var QScopedPointer<DConfigBackend> Dtk::Core::DConfigPrivate::backend
@brief 配置策略后端

@class Dtk::Core::DConfig dconfig.h
@brief 配置策略提供的接口类
@details 此接口规范定义了开发库所提供的关于配置文件读写的相关接口，如果应用程序所使用的开发库实现了此规范，则程序应当优先使用开发库提供的接口。

@fn DConfig Dtk::Core::DConfig(const QString &name, const QString &subpath, QObject *parent)
@brief 构造配置策略提供的对象
@param[in] name 配置文件名
@param[in] subpath 配置文件对应的子目录
@param[in] parent 父对象

@fn DConfig Dtk::Core::DConfig(DConfigBackend *backend, const QString &name, const QString &subpath, QObject *parent)
@brief 使用自定义的配置策略后端构造对象
@param[in] backend 调用者继承于DConfigBackend的配置策略后端
@param[in] name 配置文件名
@param[in] subpath 配置文件对应的子目录
@param[in] parent 父对象

@fn static DConfig* Dtk::Core::DConfig::create(const QString &appId, const QString &name, const QString &subpath, QObject *parent)
@brief 构造配置策略提供的对象,指定配置所属的应用Id。
@param[in] appId 配置文件所属的应用Id,为空时默认为本应用Id
@param[in] name 配置文件名
@param[in] subpath 配置文件对应的子目录
@param[in] parent 父对象
@return 构造的配置策略对象,由调用者释放

@fn static DConfig* Dtk::Core::DConfig::create(DConfigBackend *backend, const QString &appId, const QString &name, const QString &subpath, QObject *parent)
@brief 构造配置策略提供的对象,指定配置所属的应用Id。
@param[in] backend 调用者继承于DConfigBackend的配置策略后端
@param[in] appId 配置文件所属的应用Id,为空时默认为本应用Id
@param[in] name 配置文件名
@param[in] subpath 配置文件对应的子目录
@param[in] parent 父对象
@return 构造的配置策略对象,由调用者释放

@fn DConfig Dtk::Core::DConfig(DConfigBackend *backend, const QString &appId, const QString &name, const QString &subpath, QObject *parent)
@brief 使用自定义的配置策略后端构造对象
@param[in] backend 调用者继承于DConfigBackend的配置策略后端
@param[in] appId 配置文件所属的应用Id,为空时默认为本应用Id
@param[in] name 配置文件名
@param[in] subpath 配置文件对应的子目录
@param[in] parent 父对象
@note 调用者只构造backend,由DConfig释放。

@fn QString Dtk::Core::DConfig::backendName()
@brief 配置策略后端名称
@return 配置策略后端名称
@note 调用者只能用DConfig访问DConfigBackend对象,所以不返回DConfigBackend对象。

@fn QStringList Dtk::Core::DConfig::keyList()
@brief 获得所有可用的配置项名称
@return 配置项名称集合

@fn bool Dtk::Core::DConfig::isValid()
@brief 判断此后端是否可用

@fn QVariant Dtk::Core::DConfig::value(const QString &key, const QVariant &fallback)
@brief 根据配置项名称获得对应值
@param[in] key 配置项名称
@param[in] fallback 没有获取到配置项值后提供的默认值

@fn void Dtk::Core::DConfig::setValue(const QString &key, const QVariant &value);
@brief 根据配置项名称设置其值
@param[in] key 配置项名称
@param[in] value 需要更新的值

@fn void Dtk::Core::DConfig::reset(const QString &key)
@brief 设置其配置项对应的默认值,此值为经过override机制覆盖后的值,不一定为此配置文件中meta中定义的值
@param[in] key 配置项名称

@fn QString Dtk::Core::DConfig::name()
@brief 返回配置文件名称

@fn QString Dtk::Core::DConfig::subpath()
@brief 返回配置文件对应的子目录

*/